<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Amazon Echo on Alex Vanderpot</title><link>https://vanderpot.com/tags/Amazon-Echo/</link><description>Read the latest Amazon Echo on Alex Vanderpot</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 18 Jun 2016 15:53:37 +0000</lastBuildDate><atom:link href="https://vanderpot.com/tags/Amazon-Echo/index.xml" rel="self" type="application/rss+xml"/><item><title>Amazon Echo Rooting: Part 2</title><link>https://vanderpot.com/2016/06/amazon-echo-rooting-part-2/</link><pubDate>Sat, 18 Jun 2016 15:53:37 +0000</pubDate><guid>https://vanderpot.com/2016/06/amazon-echo-rooting-part-2/</guid><description>Filesystem Information While searching through the partial filesystem I extracted from the package updates, I found /etc/dev.tar which appears to be a skeleton of the dev filesystem. We can infer several things about the partition layout on the internal MMC with this information.
Building the SD Card Partitioning the SD Card It appears that uBoot will only attempt to use the partition named main-A as the root filesystem. I created a small partition named _ because there is a bug with get_partition_num that will cause it to occasionally be unable to find the first partition on the disk.</description><content:encoded><![CDATA[ <h1 id="filesystem-information">Filesystem Information</h1>
<p>While searching through the partial filesystem I extracted from the package updates, I found /etc/dev.tar which appears to be a skeleton of the dev filesystem. We can infer several things about the partition layout on the internal MMC with this information.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h1 id="building-the-sd-card">Building the SD Card</h1>
<h2 id="partitioning-the-sd-card">Partitioning the SD Card</h2>
<p>
<img class="enclosure" src="https://vanderpot.com/wp-content/uploads/2016/06/1createpartitions.png" alt="Create Partitions"  />
</p>
<p>It appears that uBoot will only attempt to use the partition named main-A as the root filesystem. I created a small partition named _ because there is a bug with get_partition_num that will cause it to occasionally be unable to find the first partition on the disk.</p>
<h2 id="installing-the-ti-sdk">Installing the TI SDK</h2>
<p>We’ll need the files from the TI SDK to supplement what isn’t available in the Amazon packages. We will extract the filesystem provided by TI for this CPU, then extract the Amazon provided files over it.</p>
<p>
<img class="enclosure" src="https://vanderpot.com/wp-content/uploads/2016/06/2dvsdk-Setup.png" alt="SDK Setup"  />
</p>
<!-- raw HTML omitted -->
 ]]></content:encoded></item><item><title>Amazon Echo Rooting: Part 1</title><link>https://vanderpot.com/2016/06/amazon-echo-rooting-part-1/</link><pubDate>Fri, 17 Jun 2016 20:50:54 +0000</pubDate><guid>https://vanderpot.com/2016/06/amazon-echo-rooting-part-1/</guid><description>Update: You can view Ike Clinton’s paper that is mentioned in this article here. It is the basis for most of this research so far. There is also a Slack channel and wiki about this subject. The PCBs I ordered came in but I haven’t had time to solder the components on or test it out. A few people in the Slack channel have gotten their own code running on the Echo, so it is possible!</description><content:encoded><![CDATA[ <p><strong>Update:</strong> You can view Ike Clinton’s <a href="https://vanderpot.com/Clinton_Cook_Paper.pdf">paper</a> that is mentioned in this article here. It is the basis for most of this research so far. There is also a Slack channel and <a href="https://github.com/echohacking/wiki/wiki">wiki </a>about this subject. The PCBs I ordered came in but I haven’t had time to solder the components on or test it out. A few people in the Slack channel have gotten their own code running on the Echo, so it is possible!</p>
<h1 id="introduction">Introduction</h1>
<p>I’ve been tentatively looking around for a root exploit or method for the <a href="https://www.amazon.com/dp/B00X4WHP5E">Amazon Echo</a> (not a referral link) since I got mine exactly a year ago. I love what it does and that it’s skills are being expanded every day by the <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit">Alexa Skills Kit</a>, but I want to dig deeper into the code running on the device and possibly develop some lower level applications than what is allowed by the Alexa Skills Kit or add more music providers (I’m a Google Play Music user). A side effect of my endeavor into the Amazon Echo is being able to audit it for privacy. A few years ago, nobody would have been on board with putting a device specifically designed to listen to you 24/7 from a company like Amazon into their home. Now, the Echo is making appearances in homes across the country. I don’t personally believe the theories that Amazon is always listening (Wireshark strongly implies that they’re not), but I will be able to audit the software to make sure they aren’t.</p>
<p>I’ve come up with several possible ways to gain access to the Echo:</p>
<ul>
<li>Exploit vulnerable service: Embedded devices are notorious for running out of date software with serious security flaws. However, the Echo has very strict firewall rules that prevent access to most services that are running.</li>
<li>Command injection: The primary user input of the Amazon Echo is the user’s voice. The Echo just uploads the audio data it records to Amazon and gets a response to relay, so it is extremely unlikely that we will be able to gain access to the Echo this way.</li>
<li>Hardware: The Amazon echo has several debug pads on the bottom of the device that had an unknown function until recently. This is probably the most viable way to gain access to the device. I plan to use this method first, then look around inside the device for any other vulnerabilities.</li>
</ul>
<h1 id="gathering-information">Gathering Information</h1>
<p>After connecting the Echo to my network and observing it’s traffic, I noticed that it downloaded updates in the clear. The Echo uses a modified version of the <a href="https://en.wikipedia.org/wiki/Deb_(file_format)">Debian Package</a> file format with added support for signing of packages. I assume that the echo will not install packages that are not signed by the correct keys. The Echo downloads a package that contains a “manifest” from amzdigitaldownloads.edgesuite.net. The manifest is a list of all available packages.</p>
<!-- raw HTML omitted -->
<p>While looking through the filesystem, I noticed a static network configuration for a USB Ethernet adapter. This is probably for internal testing at Amazon. We have seen this testing cradle with Ethernet connector in public during a demo of its integration with Vivint security. There are several other interesting bits of information like several references to the project’s original codename “doppler” and voice model data for using the word “Echo” as a wake word instead of “Alexa” or “Amazon.” There is also a firewall setup script that allows us to see which ports are open during normal operation and setup.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Thanks to a <a href="https://vanderpot.com/Clinton_Cook_Paper.pdf">research project</a> by Ike Clinton and an anonymous source, we now know the pinout of this test header. The Ethernet port was likely connected using SDIO on the SD card pins. There is also a UART console available on UART TX/UART RX at 115200 baud, but it does not accept any user input during the boot process. Attempts to halt or interrupt the U-Boot process were unsuccessful.</p>
<p>
<img class="enclosure" src="https://vanderpot.com/wp-content/uploads/2016/06/pinout.png" alt="Echo Debug Pinout"  />
</p>
<p><a href="http://www.echotalk.org/index.php/topic,164.0.html"><br>
Analysis of the Echo’s bootloader code</a> shows that it will attempt to boot from an SD card if one is connected to the pins on the debug header. The pads on this header are slightly smaller than 1x1mm square with a 2mm pitch. To avoid tearing pads off my Echo if I made a mistake and to make the process of connecting an SD card and UART header to an unmodified Echo easier, I attempted to create a 4×5 block with 2mm pin headers. I spent a few hours fiddling with melting the cheap plastic on the headers I had and decided to try to design my first breakout board to use with pogo pins.</p>
<p>
<img class="enclosure" src="https://vanderpot.com/wp-content/uploads/2016/06/echo_pcb.png" alt="Echo Breakout PCB"  />
The breakout board takes the 4×5 2mm header on the bottom of the Echo and converts it to a MicroSD socket and .1inch header that exposes UART TX, UART RX, GND, and +15V for power. I ordered 10 of these PCBs. When they come I’ll solder on all the components and write another post on creating a SD card that the Echo will boot off of. Hopefully from there I can edit some scripts on the Echo to enable a telnet server and punch a hole in the firewall to allow access to the running system.</p>
 ]]></content:encoded></item></channel></rss>