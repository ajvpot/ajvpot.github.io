<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Alex Vanderpot</title><link>https://vanderpot.com/post/</link><description>Read the latest Posts on Alex Vanderpot</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 24 Jun 2016 04:48:37 +0000</lastBuildDate><atom:link href="https://vanderpot.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Auditing A CS:GO Betting Site for Provable Fairness</title><link>https://vanderpot.com/2016/06/auditing-csgo-betting-sites-for-provable-fairness-part-1/</link><pubDate>Fri, 24 Jun 2016 04:48:37 +0000</pubDate><guid>https://vanderpot.com/2016/06/auditing-csgo-betting-sites-for-provable-fairness-part-1/</guid><description>Provable fairness is one of the building blocks of modern online gambling. Many Bitcoin casinos have popped up that use “provably fair” number generation algorithms. These algorithms guarantee that the numbers generated have not been influenced by either party in a way that is favorable for them. For a more detailed explanation of these systems, read this blog post. Recently, I have been introduced to the Counter-Strike: Global Offensive gambling scene.</description><content:encoded><![CDATA[ <p>Provable fairness is one of the building blocks of modern online gambling. Many Bitcoin casinos have popped up that use “provably fair” number generation algorithms. These algorithms guarantee that the numbers generated have not been influenced by either party in a way that is favorable for them. For a more detailed explanation of these systems, read <a href="https://vanderpot.com/2016/06/basics-of-provable-fairness/">this blog post</a>. Recently, I have been introduced to the Counter-Strike: Global Offensive gambling scene. These online casinos have sprouted up from a legal loophole. Apparently, gambling with virtual items (CS:GO skins) that hold value on a market is not illegal. However, these items can be quickly traded for cash.</p>
<p>Many of these CS:GO gambling sites claim to be provably fair. I will be auditing these claims. In this post, I will provide a description of the provable fairness algorithm this website uses and some possible attacks that either the server or client could use. If this website had vulnerabilities that the client could exploit, the impact would be astronomical. Clients could predict the results of their rolls before they happened and use that information to only make rolls that have a favorable outcome for the client. Attacks that can be used by the server could allow the website operator to scam users and cause them to lose more than normal.</p>
<h1 id="csgowildcom">CSGOWild.com</h1>
<p>CSGOWild has two games, I will be looking at both.</p>
<h2 id="coin-flip">Coin Flip</h2>
<p>CSGOWild’s coin flip game mode allows you to flip a coin against another user. Their <a href="http://csgowild.com/provably-fair">provably fair page</a> describes their algorithm as follows.</p>
<ol>
<li>The server generates a “salt” (this is an incorrect use of the word salt) and a “winning percentage.”</li>
<li>The “salt” and “winning percentage” are concatenated with a : and hashed. This is the “round hash.”</li>
<li>The “round hash” is shared with both users taking place in the game.</li>
<li>After the game is over, the round hash and the winning percentage are shared with both users.</li>
</ol>
<p>There are several problems with this process. The most blatant one being that the server does not take any input from the clients while creating the round hash or generating the winning percentage. The server knows which player bet on each side of the coin before it decides the winning percentage, so <strong>the server can choose which player will win before the coin is flipped</strong>. If this manipulation was combined with fake players that were playing for the house, CSGOWild could make those players win all of the bets that they made.</p>
<h2 id="roulette">Roulette</h2>
<p>CSGOWild’s roulette game does not have an entry on their Provable Fairness description page. I looked at the messages being sent over the WebSocket that the client uses to communicate with the server and found that there are no precautions being taken against the server influencing results. <strong>The server can choose any result at any time. This game mode is not provably fair at all.</strong></p>
 ]]></content:encoded></item><item><title>Basics of Provable Fairness</title><link>https://vanderpot.com/2016/06/basics-of-provable-fairness/</link><pubDate>Fri, 24 Jun 2016 04:16:54 +0000</pubDate><guid>https://vanderpot.com/2016/06/basics-of-provable-fairness/</guid><description>This post is a basic primer on how provably fair betting websites and number generation algorithms work. It contains helpful background information for some of my future posts.
Words to Know Provably fair number generation algorithms are built around cryptographic hashes. Provably fair systems rely on these hash functions taking input data (the plaintext or message) and outputting a representation of that data that can not be reversed, but is the same every time (the hash or message digest).</description><content:encoded><![CDATA[ <p>This post is a basic primer on how provably fair betting websites and number generation algorithms work. It contains helpful background information for some of my future posts.</p>
<h1 id="words-to-know">Words to Know</h1>
<p>Provably fair number generation algorithms are built around cryptographic hashes. Provably fair systems rely on these hash functions taking input data (the <strong>plaintext</strong> or <strong>message</strong>) and outputting a representation of that data that can not be reversed, but is the same every time (the <strong>hash</strong> or <strong>message digest</strong>). These hash functions can be broken by brute force if the plaintext is is short enough. Therefore, in order for a hash to be secure, the plaintext must be long enough and complex enough so that the hash can not be broken by brute force.</p>
<p>Two other terms that are commonly used in describing a provably fair number generation algorithm are the <strong>server</strong> and the <strong>client</strong>. The <strong>server</strong> is the digital equivalent of the “house” or casino. The <strong>client</strong> is the gambler or you.</p>
<h1 id="most-provably-fair-algorithms">Most Provably Fair Algorithms</h1>
<p>Most provably fair number generation algorithms work similarly to the steps below.</p>
<ol>
<li>The server generates a <strong>server seed</strong>. The server seed is usually a random string of numbers and letters that is long enough to be considered cryptographically secure.</li>
<li>The server <strong>hashes</strong> the server seed and sends it to the client. The client saves this information so that the round can be verified later.</li>
<li>The client generates a <strong>client seed</strong> and sends it to the server. This is another string of numbers and letters. However, this string does not have to be cryptographically secure because it is never used in an important hash function.</li>
<li>The server concatenates the plaintext of the server seed, the client seed, and a counter value. The server converts this value into a number and uses that as the roll result.</li>
<li>The server increments the counter value and repeats step 4 for each subsequent roll. The client seed is also regenerated.</li>
<li>When the game is over, the server sends the plaintext of the server seed to the client.</li>
</ol>
<h1 id="why-does-this-work">Why does this work?</h1>
<p>This algorithm guarantees that neither the client nor server can influence the results of the numbers generated. Because the client knows the hash of the server seed before the roll, the client can verify that the server seed was not changed during the game. Therefore, the client can verify all of the inputs to the number generation algorithm before the game starts, but is unable to determine the outcomes of the number generation algorithm until after the game.</p>
<p>The procedure for turning this concatenated string into a number mentioned in step 4 must also be publicly known. Provably Fair betting sites usually publish a page that explains exactly how they concatenate the inputs and how they turn those inputs into a number. The page includes enough detail to allow anyone to reproduce the algorithm and independently verify that the results were not manipulated. These pages usually also include a calculator that allows the user to verify game results using the hash of the server seed, the plaintext of the server seed, and the client seed.</p>
<h1 id="caveats">Caveats</h1>
<p>The algorithm described above only works for singleplayer games.</p>
 ]]></content:encoded></item><item><title>Securing NGINX with CloudFlare</title><link>https://vanderpot.com/2016/06/configuring-nginx-to-work-with-cloudflare/</link><pubDate>Sat, 18 Jun 2016 16:38:55 +0000</pubDate><guid>https://vanderpot.com/2016/06/configuring-nginx-to-work-with-cloudflare/</guid><description>A determined hacker can expose the origin IP address of a website behind a reverse proxy service using many methods. One of the methods I have seen used against me is scanning the entire IPv4 address space and making an HTTP request to every IP address with the Host header set to my domain. If the origin server responds to this request with the same page that is served over CloudFlare, the attacker will know that they have found the correct origin server.</description><content:encoded><![CDATA[ <p>A determined hacker can expose the origin IP address of a website behind a reverse proxy service using many methods. One of the methods I have seen used against me is scanning the entire IPv4 address space and making an HTTP request to every IP address with the Host header set to my domain. If the origin server responds to this request with the same page that is served over CloudFlare, the attacker will know that they have found the correct origin server.</p>
<p>I wrote this script to generate an NGINX configuration file that will only allow access to a website from CloudFlare IP addresses. Although using the configuration that this script generates will make it harder to find your site’s origin IP address, attackers can still use methods like e-mail origin headers, WordPress pingbacks, and social engineering to find it. This script should not be the only method you are using to protect your website.</p>
<!-- raw HTML omitted -->
 ]]></content:encoded></item><item><title>Amazon Echo Rooting: Part 2</title><link>https://vanderpot.com/2016/06/amazon-echo-rooting-part-2/</link><pubDate>Sat, 18 Jun 2016 15:53:37 +0000</pubDate><guid>https://vanderpot.com/2016/06/amazon-echo-rooting-part-2/</guid><description>Filesystem Information While searching through the partial filesystem I extracted from the package updates, I found /etc/dev.tar which appears to be a skeleton of the dev filesystem. We can infer several things about the partition layout on the internal MMC with this information.
Building the SD Card Partitioning the SD Card It appears that uBoot will only attempt to use the partition named main-A as the root filesystem. I created a small partition named _ because there is a bug with get_partition_num that will cause it to occasionally be unable to find the first partition on the disk.</description><content:encoded><![CDATA[ <h1 id="filesystem-information">Filesystem Information</h1>
<p>While searching through the partial filesystem I extracted from the package updates, I found /etc/dev.tar which appears to be a skeleton of the dev filesystem. We can infer several things about the partition layout on the internal MMC with this information.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h1 id="building-the-sd-card">Building the SD Card</h1>
<h2 id="partitioning-the-sd-card">Partitioning the SD Card</h2>
<p>
<img class="enclosure" src="https://vanderpot.com/wp-content/uploads/2016/06/1createpartitions.png" alt="Create Partitions"  />
</p>
<p>It appears that uBoot will only attempt to use the partition named main-A as the root filesystem. I created a small partition named _ because there is a bug with get_partition_num that will cause it to occasionally be unable to find the first partition on the disk.</p>
<h2 id="installing-the-ti-sdk">Installing the TI SDK</h2>
<p>We’ll need the files from the TI SDK to supplement what isn’t available in the Amazon packages. We will extract the filesystem provided by TI for this CPU, then extract the Amazon provided files over it.</p>
<p>
<img class="enclosure" src="https://vanderpot.com/wp-content/uploads/2016/06/2dvsdk-Setup.png" alt="SDK Setup"  />
</p>
<!-- raw HTML omitted -->
 ]]></content:encoded></item><item><title>Amazon Echo Rooting: Part 1</title><link>https://vanderpot.com/2016/06/amazon-echo-rooting-part-1/</link><pubDate>Fri, 17 Jun 2016 20:50:54 +0000</pubDate><guid>https://vanderpot.com/2016/06/amazon-echo-rooting-part-1/</guid><description>Update: You can view Ike Clinton’s paper that is mentioned in this article here. It is the basis for most of this research so far. There is also a Slack channel and wiki about this subject. The PCBs I ordered came in but I haven’t had time to solder the components on or test it out. A few people in the Slack channel have gotten their own code running on the Echo, so it is possible!</description><content:encoded><![CDATA[ <p><strong>Update:</strong> You can view Ike Clinton’s <a href="https://vanderpot.com/Clinton_Cook_Paper.pdf">paper</a> that is mentioned in this article here. It is the basis for most of this research so far. There is also a Slack channel and <a href="https://github.com/echohacking/wiki/wiki">wiki </a>about this subject. The PCBs I ordered came in but I haven’t had time to solder the components on or test it out. A few people in the Slack channel have gotten their own code running on the Echo, so it is possible!</p>
<h1 id="introduction">Introduction</h1>
<p>I’ve been tentatively looking around for a root exploit or method for the <a href="https://www.amazon.com/dp/B00X4WHP5E">Amazon Echo</a> (not a referral link) since I got mine exactly a year ago. I love what it does and that it’s skills are being expanded every day by the <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit">Alexa Skills Kit</a>, but I want to dig deeper into the code running on the device and possibly develop some lower level applications than what is allowed by the Alexa Skills Kit or add more music providers (I’m a Google Play Music user). A side effect of my endeavor into the Amazon Echo is being able to audit it for privacy. A few years ago, nobody would have been on board with putting a device specifically designed to listen to you 24/7 from a company like Amazon into their home. Now, the Echo is making appearances in homes across the country. I don’t personally believe the theories that Amazon is always listening (Wireshark strongly implies that they’re not), but I will be able to audit the software to make sure they aren’t.</p>
<p>I’ve come up with several possible ways to gain access to the Echo:</p>
<ul>
<li>Exploit vulnerable service: Embedded devices are notorious for running out of date software with serious security flaws. However, the Echo has very strict firewall rules that prevent access to most services that are running.</li>
<li>Command injection: The primary user input of the Amazon Echo is the user’s voice. The Echo just uploads the audio data it records to Amazon and gets a response to relay, so it is extremely unlikely that we will be able to gain access to the Echo this way.</li>
<li>Hardware: The Amazon echo has several debug pads on the bottom of the device that had an unknown function until recently. This is probably the most viable way to gain access to the device. I plan to use this method first, then look around inside the device for any other vulnerabilities.</li>
</ul>
<h1 id="gathering-information">Gathering Information</h1>
<p>After connecting the Echo to my network and observing it’s traffic, I noticed that it downloaded updates in the clear. The Echo uses a modified version of the <a href="https://en.wikipedia.org/wiki/Deb_(file_format)">Debian Package</a> file format with added support for signing of packages. I assume that the echo will not install packages that are not signed by the correct keys. The Echo downloads a package that contains a “manifest” from amzdigitaldownloads.edgesuite.net. The manifest is a list of all available packages.</p>
<!-- raw HTML omitted -->
<p>While looking through the filesystem, I noticed a static network configuration for a USB Ethernet adapter. This is probably for internal testing at Amazon. We have seen this testing cradle with Ethernet connector in public during a demo of its integration with Vivint security. There are several other interesting bits of information like several references to the project’s original codename “doppler” and voice model data for using the word “Echo” as a wake word instead of “Alexa” or “Amazon.” There is also a firewall setup script that allows us to see which ports are open during normal operation and setup.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Thanks to a <a href="https://vanderpot.com/Clinton_Cook_Paper.pdf">research project</a> by Ike Clinton and an anonymous source, we now know the pinout of this test header. The Ethernet port was likely connected using SDIO on the SD card pins. There is also a UART console available on UART TX/UART RX at 115200 baud, but it does not accept any user input during the boot process. Attempts to halt or interrupt the U-Boot process were unsuccessful.</p>
<p>
<img class="enclosure" src="https://vanderpot.com/wp-content/uploads/2016/06/pinout.png" alt="Echo Debug Pinout"  />
</p>
<p><a href="http://www.echotalk.org/index.php/topic,164.0.html"><br>
Analysis of the Echo’s bootloader code</a> shows that it will attempt to boot from an SD card if one is connected to the pins on the debug header. The pads on this header are slightly smaller than 1x1mm square with a 2mm pitch. To avoid tearing pads off my Echo if I made a mistake and to make the process of connecting an SD card and UART header to an unmodified Echo easier, I attempted to create a 4×5 block with 2mm pin headers. I spent a few hours fiddling with melting the cheap plastic on the headers I had and decided to try to design my first breakout board to use with pogo pins.</p>
<p>
<img class="enclosure" src="https://vanderpot.com/wp-content/uploads/2016/06/echo_pcb.png" alt="Echo Breakout PCB"  />
The breakout board takes the 4×5 2mm header on the bottom of the Echo and converts it to a MicroSD socket and .1inch header that exposes UART TX, UART RX, GND, and +15V for power. I ordered 10 of these PCBs. When they come I’ll solder on all the components and write another post on creating a SD card that the Echo will boot off of. Hopefully from there I can edit some scripts on the Echo to enable a telnet server and punch a hole in the firewall to allow access to the running system.</p>
 ]]></content:encoded></item><item><title>Debian Package Visualization</title><link>https://vanderpot.com/2016/05/debian-package-visualization/</link><pubDate>Fri, 06 May 2016 19:29:14 +0000</pubDate><guid>https://vanderpot.com/2016/05/debian-package-visualization/</guid><description>Recently, a close friend sent me a link to this blog post. The blog post goes over some details about exporting package relationships for Ubuntu in a format that can be read by graph generating software. The blog post was made in early 2013, so I decided to try it myself and add a few things. I made some slight modifications to his code, which can be found below.
The original blog post only contained image renderings.</description><content:encoded><![CDATA[ <p>Recently, a close friend sent me a link to <a href="https://tech-foo.blogspot.com/2013/01/visualising-ubuntu-package-repository.html">this blog post</a>. The blog post goes over some details about exporting package relationships for Ubuntu in a format that can be read by graph generating software. The blog post was made in early 2013, so I decided to try it myself and add a few things. I made some slight modifications to his code, which can be found below.</p>
<p>The original blog post only contained image renderings. I imported the data into Gephi and produced several SVG renderings of the graph. I then overlayed the vector graphics onto a blank map using the Google Maps API. There are a few renderings with different graph parameters to choose from. The big dot at the center of the graph is libc6, which makes vulnerabilities like <a href="https://security.googleblog.com/2016/02/cve-2015-7547-glibc-getaddrinfo-stack.html">CVE-2015-7547</a> seem very scary.</p>
<p>Click the image below to load the map visualization. Be forewarned, the SVG file is 3mb and can slow down some browsers.</p>
<p><a href="https://vanderpot.com/packages/">
<img class="enclosure" src="https://vanderpot.com/wp-content/uploads/2016/06/packagegraph.png" alt="packagegraph"  />
</a></p>
<p>A note about this code: Apparently the approach used in this snippet only shows a subset of packages that are in the apt repos. Thomi Richards did a <a href="http://www.tech-foo.net/ubuntu-package-repository-visualisation-take-2.html">follow up post</a> explaining this. I may redo the map with the updated dataset, but I belive that this is sufficient for now. Also, I don’t want to run Gephi’s placement algorithm for another 4 hours. Thomi’s original code, slightly edited and reformatted, is reposted below.</p>
<!-- raw HTML omitted -->
 ]]></content:encoded></item></channel></rss>